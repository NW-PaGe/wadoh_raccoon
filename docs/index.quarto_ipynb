{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "# title: \"COVID-19 Lineages\"\n",
        "# description: Documentation for pulling COVID-19 lineages from the CDC\n",
        "format: \n",
        "  html: \n",
        "    number-sections: false\n",
        "    title-block-banner: false\n",
        "    # mainfont: Manrope\n",
        "    toc: false\n",
        "---\n",
        "\n",
        "\n",
        "<!-- ::: {.container .column-page}\n",
        "\n",
        "<h1 class=\"css-qp8v3\">\n",
        "\n",
        "::: css-nzw60t\n",
        "NORTHWEST PATHOGEN GENOMICS CENTER OF EXCELLENCE\n",
        ":::\n",
        "\n",
        "wadoh_raccoon python package\n",
        "\n",
        "</h1>\n",
        "\n",
        "A Python package for transforming and linking pathogen sequencing/subtyping metadata.\n",
        "\n",
        "\n",
        "::: -->\n",
        "\n",
        ":::{.column-page}\n",
        "\n",
        "::: css-nzw60t\n",
        "NORTHWEST PATHOGEN GENOMICS CENTER OF EXCELLENCE\n",
        ":::\n",
        "\n",
        ":::{.title-header}\n",
        "[wadoh_raccoon]{style=\"font-family: 'JetBrains Mono'; background: rgba(192,192,192,.16);\"} python package\n",
        ":::\n",
        "\n",
        "A Python package for transforming and linking pathogen sequencing/subtyping metadata.\n",
        "\n",
        ":::\n",
        "\n",
        "<br>\n",
        "\n",
        ":::{.column-page}\n",
        "\n",
        "## Example Functions {{< bi filetype-py >}}\n",
        "\n",
        ":::\n",
        "\n",
        "::::{.column-page .columns}\n",
        "\n",
        ":::{.column width=\"25%\"}\n",
        "\n",
        "\n",
        "- accession matching\n",
        "- fuzzy matching\n",
        "- data cleaning utilities\n",
        "\n",
        ":::\n",
        "\n",
        ":::{.column width=\"75%\"}\n",
        "\n",
        ":::{.panel-tabset}\n",
        "\n",
        "## fuzzy matching\n",
        "\n",
        "```python\n",
        "import wadoh_raccoon as tp\n",
        "\n",
        "# input your dataframes and matching columns:\n",
        "tp.fuzzZ(\n",
        "    source=df1,\n",
        "    reference=df2,\n",
        "    first_name_src=\"first\",\n",
        "    last_name_src=\"last\",\n",
        "    dob_src=\"dob\",\n",
        "    first_name_ref=\"first\",\n",
        "    last_name_ref=\"last\",\n",
        "    dob_ref=\"dob\"\n",
        ")\n",
        "```\n",
        "\n",
        "::::{.columns}\n",
        "\n",
        ":::{.column width=\"40%\"}"
      ],
      "id": "4ffbc851"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import polars as pl\n",
        "import wadoh_raccoon.utils.helpers as helpers\n",
        "from great_tables import GT, md, style, loc, google_font\n",
        "\n",
        "# Creating the first dataframe with 'first_name', 'last_name', 'dob' columns\n",
        "df1 = pl.DataFrame({\n",
        "    \"first\": [\"Jon\", \"Smith\", \"Alex\"],\n",
        "    \"last\": [\"Doe\", \"Jaane\", \"Johnson\"],\n",
        "    \"dob\": [\"1990-01-01\", \"1985-05-15\", \"2000-09-10\"],\n",
        "    \"match\": [\"check\",\"check\",\"xmark\"]\n",
        "})\n",
        "\n",
        "# Creating the second dataframe with the same columns plus a 'numeric_id' column\n",
        "df2 = pl.DataFrame({\n",
        "    \"id\": [1, 2, 3],\n",
        "    \"first\": [\"john\", \"jane\", \"Alice\"],\n",
        "    \"last\": [\"Dooe\", \"smith\", \"Johnson\"],\n",
        "    \"dob\": [\"1990-01-01\", \"1985-05-15\", \"2020-09-10\"],\n",
        "    \"match\": [\"check\",\"check\",\"xmark\"]\n",
        "})\n",
        "\n",
        "# Display the dataframes\n",
        "(\n",
        "    helpers.gt_style(df_inp=df1,index_inp=False)\n",
        "    .fmt_icon(\n",
        "        columns=\"match\",\n",
        "        fill_color={\"check\": \"green\", \"check\": \"red\"}\n",
        "    )\n",
        "    .cols_label(\n",
        "        match=\"\"\n",
        "    )\n",
        ")"
      ],
      "id": "683cf0e6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.container-center}\n",
        "\n",
        "\n",
        "{{< bi plus-lg size=2em >}}\n",
        "\n",
        "\n",
        ":::\n"
      ],
      "id": "0f0853f1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "(\n",
        "    helpers.gt_style(df2,index_inp=False)\n",
        "    .tab_style(\n",
        "        style=[\n",
        "            style.fill(color=\"#f9e3d6\")\n",
        "        ],\n",
        "        locations=[loc.body(columns=\"id\"),loc.column_labels(columns=\"id\")]\n",
        "    )\n",
        "    .fmt_icon(\n",
        "        columns=\"match\",\n",
        "        fill_color={\"check\": \"green\", \"check\": \"red\"}\n",
        "    )\n",
        "    .cols_label(\n",
        "        match=\"\"\n",
        "    )\n",
        ")"
      ],
      "id": "9847ce9a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::{.column width=\"5%\"}\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        ":::{style=\"transform: translate(45px,0px)\"}\n",
        "\n",
        "\n",
        "{{< bi arrow-right-square-fill size=2em >}}\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        ":::{.column width=\"55%\"}\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n"
      ],
      "id": "95396638"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "# Creating the second dataframe with the same columns plus a 'numeric_id' column\n",
        "final = pl.DataFrame({\n",
        "    \"id\": [1, 2],\n",
        "    \"first\": [\"JOHN\", \"JANE\"],\n",
        "    \"last\": [\"DOE\", \"SMITH\"],\n",
        "    \"dob\": [\"1990-01-01\", \"1985-05-15\"]\n",
        "})\n",
        "\n",
        "(\n",
        "    helpers.gt_style(final,index_inp=False)\n",
        "    .tab_style(\n",
        "        style=[\n",
        "            style.fill(color=\"#f9e3d6\")\n",
        "        ],\n",
        "        locations=[loc.body(columns=\"id\"),loc.column_labels(columns=\"id\")]\n",
        "    )\n",
        ")"
      ],
      "id": "9b8e6da8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "## accession matching\n",
        "\n",
        "\n",
        "```python\n",
        "import wadoh_raccoon as tp\n",
        "\n",
        "# input your dataframes and matching columns:\n",
        "tp.match_accession(\n",
        "    source=df1,\n",
        "    reference=df2,\n",
        "    accession='NCBI_ACCESSION'\n",
        ")\n",
        "```\n",
        "\n",
        "::::{.columns}\n",
        "\n",
        ":::{.column width=\"40%\"}"
      ],
      "id": "05e4adc1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import polars as pl\n",
        "import wadoh_raccoon.utils.helpers as helpers\n",
        "from great_tables import GT, md, style, loc, google_font\n",
        "\n",
        "# Creating the first dataframe with 'first_name', 'last_name', 'dob' columns\n",
        "df1 = pl.DataFrame({\n",
        "    \"accession\": [\"12345\",\"CDC-010023\",'L00029'],\n",
        "    \"match\": [\"check\",\"check\",\"xmark\"]\n",
        "})\n",
        "\n",
        "# Creating the second dataframe with the same columns plus a 'numeric_id' column\n",
        "df2 = pl.DataFrame({\n",
        "    \"id\": [1, 2, 3],\n",
        "    \"accession\": [\"12345\",\"CDC-010023\",'X0293'],\n",
        "    \"match\": [\"check\",\"check\",\"xmark\"]\n",
        "})\n",
        "\n",
        "# Display the dataframes\n",
        "(\n",
        "    helpers.gt_style(df_inp=df1,index_inp=False)\n",
        "    .fmt_icon(\n",
        "        columns=\"match\",\n",
        "        fill_color={\"check\": \"green\", \"check\": \"red\"}\n",
        "    )\n",
        "    .cols_label(\n",
        "        match=\"\"\n",
        "    )\n",
        ")"
      ],
      "id": "a32a4a23",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.container-center}\n",
        "\n",
        "\n",
        "{{< bi plus-lg size=2em >}}\n",
        "\n",
        "\n",
        ":::\n"
      ],
      "id": "82539424"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "(\n",
        "    helpers.gt_style(df2,index_inp=False)\n",
        "    .tab_style(\n",
        "        style=[\n",
        "            style.fill(color=\"#f9e3d6\")\n",
        "        ],\n",
        "        locations=[loc.body(columns=\"id\"),loc.column_labels(columns=\"id\")]\n",
        "    )\n",
        "    .fmt_icon(\n",
        "        columns=\"match\",\n",
        "        fill_color={\"check\": \"green\", \"check\": \"red\"}\n",
        "    )\n",
        "    .cols_label(\n",
        "        match=\"\"\n",
        "    )\n",
        ")"
      ],
      "id": "f223fa97",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::{.column width=\"5%\"}\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        ":::{style=\"transform: translate(45px,0px)\"}\n",
        "\n",
        "\n",
        "{{< bi arrow-right-square-fill size=2em >}}\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        ":::{.column width=\"55%\"}\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n"
      ],
      "id": "570c0a70"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "# Creating the second dataframe with the same columns plus a 'numeric_id' column\n",
        "final = pl.DataFrame({\n",
        "    \"id\": [1, 2],\n",
        "    \"accession\": [\"12345\",\"CDC-010023\"]\n",
        "})\n",
        "\n",
        "(\n",
        "    helpers.gt_style(final,index_inp=False)\n",
        "    .tab_style(\n",
        "        style=[\n",
        "            style.fill(color=\"#f9e3d6\")\n",
        "        ],\n",
        "        locations=[loc.body(columns=\"id\"),loc.column_labels(columns=\"id\")]\n",
        "    )\n",
        ")"
      ],
      "id": "b30b26d7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "\n",
        "## utilities\n"
      ],
      "id": "80fce0a7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import polars as pl\n",
        "from wadoh_raccoon.utils import helpers\n",
        "\n",
        "df = pl.DataFrame({\n",
        "    \"old_date\": [\n",
        "        \"2024-10-30\",     # ISO format\n",
        "        \"10-30-2024\",     # US format\n",
        "        \"October 30, 2024\",  # Full month name format,\n",
        "        \"45496\"      # an excel date LOL\n",
        "    ]\n",
        "})\n",
        "\n",
        "# apply the function\n",
        "df.with_columns(new_date=helpers.date_format('old_date'))"
      ],
      "id": "c57c1054",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "helpers.gt_style(\n",
        "    df\n",
        "    .with_columns(\n",
        "        new_date=helpers.date_format('old_date')\n",
        "    )\n",
        ")"
      ],
      "id": "1ef8419f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        ":::{.column-page}\n",
        "\n",
        "## Installation {{< bi file-earmark-arrow-down-fill >}}\n",
        "\n",
        ":::{.panel-tabset}\n",
        "\n",
        "### install\n",
        "\n",
        "```python\n",
        "uv pip install git+https://github.com/NW-PaGe/wadoh_raccoon.git#egg=wadoh_raccoon\n",
        "```\n",
        "\n",
        "### install specific version\n",
        "\n",
        "To install a specific version, find the git tag noted in the GitHub Release section (something like v0.2.5) and then put it in the install statement like .git@v0.2.5:\n",
        "\n",
        "```python\n",
        "uv pip install git+https://github.com/NW-PaGe/wadoh_raccoon.git@v0.2.5#egg=wadoh_raccoon\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        ":::{.column-page}\n",
        "\n",
        "## API Reference {{< bi stickies-fill >}}\n",
        "\n",
        "\n",
        "<a href=\"reference/index.qmd\" class=\"button\">reference</a>\n",
        "\n",
        "\n",
        ":::\n"
      ],
      "id": "5a4e7955"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}