{
  "hash": "f017864a9e4a239b53d40f57b0019271",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: helpers\n---\n\n\n\n`wadoh_raccoon.utils.helpers`\n\n\n\n## Functions\n\n| Name | Description |\n| --- | --- |\n| [date_format](#src.wadoh_raccoon.utils.helpers.date_format) | Format Dates |\n| [save_raw_values](#src.wadoh_raccoon.utils.helpers.save_raw_values) | save raw values |\n\n### date_format { #src.wadoh_raccoon.utils.helpers.date_format }\n\n```python\nwadoh_raccoon.utils.helpers.date_format(col)\n```\n\nFormat Dates\n\nConvert string dates into a yyyy-mm-dd format. \nThe function uses pl.coalesce to try to process different formats.\nFor example, it will first try to convert m/d/y, and then if that doesn't work it will try d/m/y.\nIt's not perfect, but if someone messes up the date it's their fault.\n\n**Note: it won't attempt to convert excel dates. If someone sends us excel dates we will file a lawsuit.**\n\n#### Usage {.doc-section .doc-section-usage}\n\nTo be applied to a string date column.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name   | Type   | Description                     | Default    |\n|--------|--------|---------------------------------|------------|\n| col    | str    | a string column that has a date | _required_ |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name        | Type   | Description   |\n|-------------|--------|---------------|\n| output_date | date   | a date column |\n\n#### Examples {.doc-section .doc-section-examples}\n\n\n::: {#72015e0e .cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\nfrom wadoh_raccoon.utils import helpers\n\n\ndf = pl.DataFrame({\n    \"dates\": [\n        \"2024-10-30\",     # ISO format\n        \"30/10/2024\",     # European format\n        \"10/20/2024\",     # US format\n        \"10-30-2024\",     # US format\n        \"October 30, 2024\",  # Full month name format,\n        \"45496\",           # an excel date LOL\n        \"2022-12-27 08:26:49\"\n    ]\n})\n\nprint(\n    df\n    .with_columns(\n        new_date=helpers.date_format('dates')\n    )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (7, 2)\n┌─────────────────────┬────────────┐\n│ dates               ┆ new_date   │\n│ ---                 ┆ ---        │\n│ str                 ┆ date       │\n╞═════════════════════╪════════════╡\n│ 2024-10-30          ┆ 2024-10-30 │\n│ 30/10/2024          ┆ 2024-10-30 │\n│ 10/20/2024          ┆ 2024-10-20 │\n│ 10-30-2024          ┆ 2024-10-30 │\n│ October 30, 2024    ┆ 2024-10-30 │\n│ 45496               ┆ null       │\n│ 2022-12-27 08:26:49 ┆ 2022-12-27 │\n└─────────────────────┴────────────┘\n```\n:::\n:::\n\n\n### save_raw_values { #src.wadoh_raccoon.utils.helpers.save_raw_values }\n\n```python\nwadoh_raccoon.utils.helpers.save_raw_values(df_inp, primary_key_col)\n```\n\nsave raw values\n\n#### Usage {.doc-section .doc-section-usage}\n\nConverts a polars dataframe into a dataframe with all columns in a struct column.\nIt's good for saving raw outputs of data.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name            | Type         | Description                                                           | Default    |\n|-----------------|--------------|-----------------------------------------------------------------------|------------|\n| df_inp          | pl.DataFrame | a polars dataframe                                                    | _required_ |\n| primary_key_col | str          | column name for the primary key (submission key, not person/case key) | _required_ |\n\n#### Returns {.doc-section .doc-section-returns}\n\n| Name   | Type         | Description   |\n|--------|--------------|---------------|\n| df     | pl.DataFrame | a dataframe   |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#7949df29 .cell execution_count=2}\n``` {.python .cell-code}\nimport polars as pl\nfrom wadoh_raccoon.utils import helpers\n\ndata = pl.DataFrame({\n    \"lab_name\": [\"PHL\", \"MFT\", \"ELR\",\"PHL\"],\n    \"first_name\": [\"Alice\", \"Bob\", \"Charlie\", \"Charlie\"],\n    \"last_name\": [\"Smith\", \"Johnson\", \"Williams\", \"Williams\"],\n    \"WA_ID\": [1,2,4,4]\n})\n\nreceived_submissions_df = (\n        helpers.save_raw_values(df_inp=data,primary_key_col=\"WA_ID\")\n)\n\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (4, 4)\n┌──────────┬────────────┬───────────┬───────┐\n│ lab_name ┆ first_name ┆ last_name ┆ WA_ID │\n│ ---      ┆ ---        ┆ ---       ┆ ---   │\n│ str      ┆ str        ┆ str       ┆ i64   │\n╞══════════╪════════════╪═══════════╪═══════╡\n│ PHL      ┆ Alice      ┆ Smith     ┆ 1     │\n│ MFT      ┆ Bob        ┆ Johnson   ┆ 2     │\n│ ELR      ┆ Charlie    ┆ Williams  ┆ 4     │\n│ PHL      ┆ Charlie    ┆ Williams  ┆ 4     │\n└──────────┴────────────┴───────────┴───────┘\n```\n:::\n:::\n\n\n::: {#e3a49782 .cell execution_count=3}\n``` {.python .cell-code}\nprint(received_submissions_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (4, 3)\n┌───────────────────┬──────────────────────┬────────────────────────────────┐\n│ submission_number ┆ internal_create_date ┆ raw_inbound_submission         │\n│ ---               ┆ ---                  ┆ ---                            │\n│ i64               ┆ date                 ┆ struct[4]                      │\n╞═══════════════════╪══════════════════════╪════════════════════════════════╡\n│ 1                 ┆ 2025-03-18           ┆ {\"PHL\",\"Alice\",\"Smith\",1}      │\n│ 2                 ┆ 2025-03-18           ┆ {\"MFT\",\"Bob\",\"Johnson\",2}      │\n│ 4                 ┆ 2025-03-18           ┆ {\"ELR\",\"Charlie\",\"Williams\",4} │\n│ 4                 ┆ 2025-03-18           ┆ {\"PHL\",\"Charlie\",\"Williams\",4} │\n└───────────────────┴──────────────────────┴────────────────────────────────┘\n```\n:::\n:::\n\n\n",
    "supporting": [
      "helpers_files"
    ],
    "filters": [],
    "includes": {}
  }
}